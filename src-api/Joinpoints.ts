///////////////////////////////////////////////////
// This file is generated by build-interfaces.js //
///////////////////////////////////////////////////

/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */

import JavaTypes from "lara-js/api/lara/util/JavaTypes.js";

export class Joinpoint {
  protected obj!: any;
  constructor(obj: any) {
    this.obj = obj;
  }
  get attributes(): string[] { return wrapJoinPoint(this.obj.getAttributes)() }
  get selects(): string[] { return wrapJoinPoint(this.obj.getSelects)() }
  get actions(): string[] { return wrapJoinPoint(this.obj.getActions)() }
  get ast(): string { return wrapJoinPoint(this.obj.getAst)() }
  get astChildren(): Joinpoint[] { return wrapJoinPoint(this.obj.getAstChildren)() }
  get astId(): string { return wrapJoinPoint(this.obj.getAstId)() }
  get astName(): string { return wrapJoinPoint(this.obj.getAstName)() }
  get astNumChildren(): number { return wrapJoinPoint(this.obj.getAstNumChildren)() }
  get astParent(): Joinpoint { return wrapJoinPoint(this.obj.getAstParent)() }
  get bitWidth(): number { return wrapJoinPoint(this.obj.getBitWidth)() }
  get chain(): string[] { return wrapJoinPoint(this.obj.getChain)() }
  get children(): Joinpoint[] { return wrapJoinPoint(this.obj.getChildren)() }
  get code(): string { return wrapJoinPoint(this.obj.getCode)() }
  get column(): number { return wrapJoinPoint(this.obj.getColumn)() }
  get currentRegion(): Joinpoint { return wrapJoinPoint(this.obj.getCurrentRegion)() }
  get data(): object { return wrapJoinPoint(this.obj.getData)() }
  get depth(): number { return wrapJoinPoint(this.obj.getDepth)() }
  get descendants(): Joinpoint[] { return wrapJoinPoint(this.obj.getDescendants)() }
  get endColumn(): number { return wrapJoinPoint(this.obj.getEndColumn)() }
  get endLine(): number { return wrapJoinPoint(this.obj.getEndLine)() }
  get filename(): string { return wrapJoinPoint(this.obj.getFilename)() }
  get filepath(): string { return wrapJoinPoint(this.obj.getFilepath)() }
  get firstChild(): Joinpoint { return wrapJoinPoint(this.obj.getFirstChild)() }
  get hasAstParent(): boolean { return wrapJoinPoint(this.obj.getHasAstParent)() }
  get hasChildren(): boolean { return wrapJoinPoint(this.obj.getHasChildren)() }
  get hasParent(): boolean { return wrapJoinPoint(this.obj.getHasParent)() }
  get hasType(): boolean { return wrapJoinPoint(this.obj.getHasType)() }
  get inlineComments(): Comment[] { return wrapJoinPoint(this.obj.getInlineComments)() }
  get isCilk(): boolean { return wrapJoinPoint(this.obj.getIsCilk)() }
  get isInSystemHeader(): boolean { return wrapJoinPoint(this.obj.getIsInSystemHeader)() }
  get isInsideHeader(): boolean { return wrapJoinPoint(this.obj.getIsInsideHeader)() }
  get isInsideLoopHeader(): boolean { return wrapJoinPoint(this.obj.getIsInsideLoopHeader)() }
  get isMacro(): boolean { return wrapJoinPoint(this.obj.getIsMacro)() }
  get javaFields(): string[] { return wrapJoinPoint(this.obj.getJavaFields)() }
  get joinpointType(): string { return wrapJoinPoint(this.obj.getJoinpointType)() }
  get jpId(): string { return wrapJoinPoint(this.obj.getJpId)() }
  get keys(): string[] { return wrapJoinPoint(this.obj.getKeys)() }
  get lastChild(): Joinpoint { return wrapJoinPoint(this.obj.getLastChild)() }
  get leftJp(): Joinpoint { return wrapJoinPoint(this.obj.getLeftJp)() }
  get line(): number { return wrapJoinPoint(this.obj.getLine)() }
  get location(): string { return wrapJoinPoint(this.obj.getLocation)() }
  get numChildren(): number { return wrapJoinPoint(this.obj.getNumChildren)() }
  get parent(): Joinpoint { return wrapJoinPoint(this.obj.getParent)() }
  get parentRegion(): Joinpoint { return wrapJoinPoint(this.obj.getParentRegion)() }
  get pragmas(): Pragma[] { return wrapJoinPoint(this.obj.getPragmas)() }
  get rightJp(): Joinpoint { return wrapJoinPoint(this.obj.getRightJp)() }
  get root(): Joinpoint { return wrapJoinPoint(this.obj.getRoot)() }
  get scopeNodes(): Joinpoint[] { return wrapJoinPoint(this.obj.getScopeNodes)() }
  get siblingsLeft(): Joinpoint[] { return wrapJoinPoint(this.obj.getSiblingsLeft)() }
  get siblingsRight(): Joinpoint[] { return wrapJoinPoint(this.obj.getSiblingsRight)() }
  get stmt(): Statement { return wrapJoinPoint(this.obj.getStmt)() }
  get type(): Type { return wrapJoinPoint(this.obj.getType)() }
  get joinPointType(): string { return wrapJoinPoint(this.obj.getJoinPointType)() }
  getAncestor(type: string): Joinpoint { return wrapJoinPoint(this.obj.getAncestor(type)); }
  getAstAncestor(type: string): Joinpoint { return wrapJoinPoint(this.obj.getAstAncestor(type)); }
  getAstChild(index: number): Joinpoint { return wrapJoinPoint(this.obj.getAstChild(index)); }
  getAstIsInstance(className: string): boolean { return wrapJoinPoint(this.obj.getAstIsInstance(className)); }
  getChainAncestor(type: string): Joinpoint { return wrapJoinPoint(this.obj.getChainAncestor(type)); }
  getChild(index: number): Joinpoint { return wrapJoinPoint(this.obj.getChild(index)); }
  getContains(jp: Joinpoint): boolean { return wrapJoinPoint(this.obj.getContains(jp)); }
  getDescendants(type: string): Joinpoint[] { return wrapJoinPoint(this.obj.getDescendants(type)); }
  getDescendantsAndSelf(type: string): Joinpoint[] { return wrapJoinPoint(this.obj.getDescendantsAndSelf(type)); }
  getFirstJp(type: string): Joinpoint { return wrapJoinPoint(this.obj.getFirstJp(type)); }
  getGetUserField(fieldName: string): object { return wrapJoinPoint(this.obj.getGetUserField(fieldName)); }
  getGetValue(key: string): object { return wrapJoinPoint(this.obj.getGetValue(key)); }
  getHasNode(nodeOrJp: object): boolean { return wrapJoinPoint(this.obj.getHasNode(nodeOrJp)); }
  getJavaFieldType(fieldName: string): string { return wrapJoinPoint(this.obj.getJavaFieldType(fieldName)); }
  getJavaValue(fieldName: string): object { return wrapJoinPoint(this.obj.getJavaValue(fieldName)); }
  getKeyType(key: string): object { return wrapJoinPoint(this.obj.getKeyType(key)); }
  getLaraDescendants(type: string): Joinpoint[] { return wrapJoinPoint(this.obj.getLaraDescendants(type)); }
  getUserField(fieldName: string): object { return wrapJoinPoint(this.obj.getUserField(fieldName)); }
  getInstanceOf(name: string): boolean { return wrapJoinPoint(this.obj.getInstanceOf(name)); }
  insert(position: "before" | "after" | "replace", code: string): void { return wrapJoinPoint(this.obj.insert(position, code)); }
  def(attribute: string, value: object): void { return wrapJoinPoint(this.obj.def(attribute, value)); }
  copy(): Joinpoint { return wrapJoinPoint(this.obj.copy()); }
  dataAssign(source: object): void { return wrapJoinPoint(this.obj.dataAssign(source)); }
  dataClear(): void { return wrapJoinPoint(this.obj.dataClear()); }
  deepCopy(): Joinpoint { return wrapJoinPoint(this.obj.deepCopy()); }
  detach(): Joinpoint { return wrapJoinPoint(this.obj.detach()); }
  insertAfter(node: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.insertAfter(node)); }
  insertBefore(node: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.insertBefore(node)); }
  messageToUser(message: string): void { return wrapJoinPoint(this.obj.messageToUser(message)); }
  removeChildren(): void { return wrapJoinPoint(this.obj.removeChildren()); }
  replaceWith(node: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.replaceWith(node)); }
  replaceWithStrings(node: string[]): Joinpoint { return wrapJoinPoint(this.obj.replaceWithStrings(node)); }
  setData(source: object): void { return wrapJoinPoint(this.obj.setData(source)); }
  setFirstChild(node: Joinpoint): void { return wrapJoinPoint(this.obj.setFirstChild(node)); }
  setInlineComments(comments: string[]): void { return wrapJoinPoint(this.obj.setInlineComments(comments)); }
  setLastChild(node: Joinpoint): void { return wrapJoinPoint(this.obj.setLastChild(node)); }
  setType(type: Type): void { return wrapJoinPoint(this.obj.setType(type)); }
  setUserField(fieldName: string, value: object): object { return wrapJoinPoint(this.obj.setUserField(fieldName, value)); }
  setValue(key: string, value: object): Joinpoint { return wrapJoinPoint(this.obj.setValue(key, value)); }
  toComment(): Joinpoint { return wrapJoinPoint(this.obj.toComment()); }
}

export class Attribute extends Joinpoint {
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
}

export class ClavaException extends Joinpoint {
  get exception(): object { return wrapJoinPoint(this.obj.getException)() }
  get exceptionType(): string { return wrapJoinPoint(this.obj.getExceptionType)() }
  get message(): string { return wrapJoinPoint(this.obj.getMessage)() }
}

export class Comment extends Joinpoint {
  get text(): string { return wrapJoinPoint(this.obj.getText)() }
  setText(text: string): void { return wrapJoinPoint(this.obj.setText(text)); }
}

export class Decl extends Joinpoint {
  get attrs(): Attribute[] { return wrapJoinPoint(this.obj.getAttrs)() }
}

export class Empty extends Joinpoint {
}

export class Expression extends Joinpoint {
  get decl(): Decl { return wrapJoinPoint(this.obj.getDecl)() }
  get implicitCast(): Cast { return wrapJoinPoint(this.obj.getImplicitCast)() }
  get isFunctionArgument(): boolean { return wrapJoinPoint(this.obj.getIsFunctionArgument)() }
  get use(): "read" | "write" | "readwrite" { return wrapJoinPoint(this.obj.getUse)() }
  get vardecl(): Vardecl { return wrapJoinPoint(this.obj.getVardecl)() }
}

export class File extends Joinpoint {
  get baseSourcePath(): string { return wrapJoinPoint(this.obj.getBaseSourcePath)() }
  get destinationFilepath(): string { return wrapJoinPoint(this.obj.getDestinationFilepath)() }
  get errorOutput(): string { return wrapJoinPoint(this.obj.getErrorOutput)() }
  get file(): object { return wrapJoinPoint(this.obj.getFile)() }
  get hasMain(): boolean { return wrapJoinPoint(this.obj.getHasMain)() }
  get hasParsingErrors(): boolean { return wrapJoinPoint(this.obj.getHasParsingErrors)() }
  get includes(): Include[] { return wrapJoinPoint(this.obj.getIncludes)() }
  get isCxx(): boolean { return wrapJoinPoint(this.obj.getIsCxx)() }
  get isHeader(): boolean { return wrapJoinPoint(this.obj.getIsHeader)() }
  get isOpenCL(): boolean { return wrapJoinPoint(this.obj.getIsOpenCL)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get path(): string { return wrapJoinPoint(this.obj.getPath)() }
  get relativeFilepath(): string { return wrapJoinPoint(this.obj.getRelativeFilepath)() }
  get relativeFolderpath(): string { return wrapJoinPoint(this.obj.getRelativeFolderpath)() }
  get sourceFoldername(): string { return wrapJoinPoint(this.obj.getSourceFoldername)() }
  getDestinationFilepath(destinationFolderpath: string): string { return wrapJoinPoint(this.obj.getDestinationFilepath(destinationFolderpath)); }
  addCInclude(name: string, isAngled: boolean): void { return wrapJoinPoint(this.obj.addCInclude(name, isAngled)); }
  addFunction(name: string): Joinpoint { return wrapJoinPoint(this.obj.addFunction(name)); }
  addGlobal(name: string, type: Joinpoint, initValue: string): Vardecl { return wrapJoinPoint(this.obj.addGlobal(name, type, initValue)); }
  addInclude(name: string, isAngled: boolean): void { return wrapJoinPoint(this.obj.addInclude(name, isAngled)); }
  addIncludeJp(jp: Joinpoint): void { return wrapJoinPoint(this.obj.addIncludeJp(jp)); }
  insertBegin(node: Joinpoint): void { return wrapJoinPoint(this.obj.insertBegin(node)); }
  insertEnd(node: Joinpoint): void { return wrapJoinPoint(this.obj.insertEnd(node)); }
  rebuild(): File { return wrapJoinPoint(this.obj.rebuild()); }
  rebuildTry(): Joinpoint { return wrapJoinPoint(this.obj.rebuildTry()); }
  setName(filename: string): void { return wrapJoinPoint(this.obj.setName(filename)); }
  setRelativeFolderpath(path: string): void { return wrapJoinPoint(this.obj.setRelativeFolderpath(path)); }
  write(destinationFoldername: string): string { return wrapJoinPoint(this.obj.write(destinationFoldername)); }
}

export class Include extends Decl {
  get isAngled(): boolean { return wrapJoinPoint(this.obj.getIsAngled)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get relativeFolderpath(): string { return wrapJoinPoint(this.obj.getRelativeFolderpath)() }
}

export class Literal extends Expression {
}

export class MemberAccess extends Expression {
  get base(): Expression { return wrapJoinPoint(this.obj.getBase)() }
  get memberChain(): Expression[] { return wrapJoinPoint(this.obj.getMemberChain)() }
  get memberChainNames(): string[] { return wrapJoinPoint(this.obj.getMemberChainNames)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
}

export class NamedDecl extends Decl {
  get isPublic(): boolean { return wrapJoinPoint(this.obj.getIsPublic)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get qualifiedName(): string { return wrapJoinPoint(this.obj.getQualifiedName)() }
  get qualifiedPrefix(): string { return wrapJoinPoint(this.obj.getQualifiedPrefix)() }
  setName(name: string): void { return wrapJoinPoint(this.obj.setName(name)); }
  setQualifiedName(name: string): void { return wrapJoinPoint(this.obj.setQualifiedName(name)); }
  setQualifiedPrefix(qualifiedPrefix: string): void { return wrapJoinPoint(this.obj.setQualifiedPrefix(qualifiedPrefix)); }
}

export class NewExpr extends Expression {
}

export class Op extends Expression {
  get isBitwise(): boolean { return wrapJoinPoint(this.obj.getIsBitwise)() }
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
  get operator(): string { return wrapJoinPoint(this.obj.getOperator)() }
}

export class ParenExpr extends Expression {
  get subExpr(): Expression { return wrapJoinPoint(this.obj.getSubExpr)() }
}

export class Pragma extends Joinpoint {
  get content(): string { return wrapJoinPoint(this.obj.getContent)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get target(): Joinpoint { return wrapJoinPoint(this.obj.getTarget)() }
  get targetNodes(): Joinpoint[] { return wrapJoinPoint(this.obj.getTargetNodes)() }
  getTargetNodes(endPragma: string): Joinpoint[] { return wrapJoinPoint(this.obj.getTargetNodes(endPragma)); }
  setContent(content: string): void { return wrapJoinPoint(this.obj.setContent(content)); }
  setName(name: string): void { return wrapJoinPoint(this.obj.setName(name)); }
}

export class Program extends Joinpoint {
  get baseFolder(): string { return wrapJoinPoint(this.obj.getBaseFolder)() }
  get defaultFlags(): string[] { return wrapJoinPoint(this.obj.getDefaultFlags)() }
  get extraIncludes(): string[] { return wrapJoinPoint(this.obj.getExtraIncludes)() }
  get extraLibs(): string[] { return wrapJoinPoint(this.obj.getExtraLibs)() }
  get extraProjects(): string[] { return wrapJoinPoint(this.obj.getExtraProjects)() }
  get extraSources(): string[] { return wrapJoinPoint(this.obj.getExtraSources)() }
  get files(): File[] { return wrapJoinPoint(this.obj.getFiles)() }
  get includeFolders(): string[] { return wrapJoinPoint(this.obj.getIncludeFolders)() }
  get isCxx(): boolean { return wrapJoinPoint(this.obj.getIsCxx)() }
  get main(): Function { return wrapJoinPoint(this.obj.getMain)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get standard(): string { return wrapJoinPoint(this.obj.getStandard)() }
  get stdFlag(): string { return wrapJoinPoint(this.obj.getStdFlag)() }
  get userFlags(): string[] { return wrapJoinPoint(this.obj.getUserFlags)() }
  get weavingFolder(): string { return wrapJoinPoint(this.obj.getWeavingFolder)() }
  addExtraInclude(path: string): void { return wrapJoinPoint(this.obj.addExtraInclude(path)); }
  addExtraIncludeFromGit(gitRepo: string): void { return wrapJoinPoint(this.obj.addExtraIncludeFromGit(gitRepo)); }
  addExtraLib(lib: string): void { return wrapJoinPoint(this.obj.addExtraLib(lib)); }
  addExtraSource(path: string): void { return wrapJoinPoint(this.obj.addExtraSource(path)); }
  addExtraSourceFromGit(gitRepo: string): void { return wrapJoinPoint(this.obj.addExtraSourceFromGit(gitRepo)); }
  addFile(file: File): Joinpoint { return wrapJoinPoint(this.obj.addFile(file)); }
  addFileFromPath(filepath: object): Joinpoint { return wrapJoinPoint(this.obj.addFileFromPath(filepath)); }
  addProjectFromGit(gitRepo: string, libs: string[]): void { return wrapJoinPoint(this.obj.addProjectFromGit(gitRepo, libs)); }
  atexit(func: Function): void { return wrapJoinPoint(this.obj.atexit(func)); }
  pop(): void { return wrapJoinPoint(this.obj.pop()); }
  push(): void { return wrapJoinPoint(this.obj.push()); }
  rebuild(): boolean { return wrapJoinPoint(this.obj.rebuild()); }
  rebuildFuzzy(): void { return wrapJoinPoint(this.obj.rebuildFuzzy()); }
}

export class Record extends NamedDecl {
  get fields(): Joinpoint[] { return wrapJoinPoint(this.obj.getFields)() }
  get functions(): Function[] { return wrapJoinPoint(this.obj.getFunctions)() }
  get isImplementation(): boolean { return wrapJoinPoint(this.obj.getIsImplementation)() }
  get isPrototype(): boolean { return wrapJoinPoint(this.obj.getIsPrototype)() }
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
  addField(field: Field): void { return wrapJoinPoint(this.obj.addField(field)); }
}

export class Statement extends Joinpoint {
  get isFirst(): boolean { return wrapJoinPoint(this.obj.getIsFirst)() }
  get isLast(): boolean { return wrapJoinPoint(this.obj.getIsLast)() }
}

export class Struct extends Record {
}

export class Switch extends Statement {
}

export class Tag extends Pragma {
  get id(): string { return wrapJoinPoint(this.obj.getId)() }
}

export class TernaryOp extends Op {
  get cond(): Expression { return wrapJoinPoint(this.obj.getCond)() }
  get falseExpr(): Expression { return wrapJoinPoint(this.obj.getFalseExpr)() }
  get trueExpr(): Expression { return wrapJoinPoint(this.obj.getTrueExpr)() }
}

export class This extends Expression {
}

export class Type extends Joinpoint {
  get arrayDims(): number[] { return wrapJoinPoint(this.obj.getArrayDims)() }
  get arraySize(): number { return wrapJoinPoint(this.obj.getArraySize)() }
  get constant(): boolean { return wrapJoinPoint(this.obj.getConstant)() }
  get desugar(): Type { return wrapJoinPoint(this.obj.getDesugar)() }
  get desugarAll(): Type { return wrapJoinPoint(this.obj.getDesugarAll)() }
  get fieldTree(): string { return wrapJoinPoint(this.obj.getFieldTree)() }
  get hasSugar(): boolean { return wrapJoinPoint(this.obj.getHasSugar)() }
  get hasTemplateArgs(): boolean { return wrapJoinPoint(this.obj.getHasTemplateArgs)() }
  get isArray(): boolean { return wrapJoinPoint(this.obj.getIsArray)() }
  get isAuto(): boolean { return wrapJoinPoint(this.obj.getIsAuto)() }
  get isBuiltin(): boolean { return wrapJoinPoint(this.obj.getIsBuiltin)() }
  get isPointer(): boolean { return wrapJoinPoint(this.obj.getIsPointer)() }
  get isTopLevel(): boolean { return wrapJoinPoint(this.obj.getIsTopLevel)() }
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
  get normalize(): Type { return wrapJoinPoint(this.obj.getNormalize)() }
  get templateArgsStrings(): string[] { return wrapJoinPoint(this.obj.getTemplateArgsStrings)() }
  get templateArgsTypes(): Type[] { return wrapJoinPoint(this.obj.getTemplateArgsTypes)() }
  get typeFields(): Map<string, any> { return wrapJoinPoint(this.obj.getTypeFields)() }
  get unwrap(): Type { return wrapJoinPoint(this.obj.getUnwrap)() }
  getBitWidth(reference: Joinpoint): number { return wrapJoinPoint(this.obj.getBitWidth(reference)); }
  asConst(): Type { return wrapJoinPoint(this.obj.asConst()); }
  setDesugar(desugaredType: Type): void { return wrapJoinPoint(this.obj.setDesugar(desugaredType)); }
  setTemplateArgsTypes(templateArgTypes: Type[]): void { return wrapJoinPoint(this.obj.setTemplateArgsTypes(templateArgTypes)); }
  setTypeFieldByValueRecursive(currentValue: object, newValue: object): boolean { return wrapJoinPoint(this.obj.setTypeFieldByValueRecursive(currentValue, newValue)); }
  setUnderlyingType(oldValue: Type, newValue: Type): Type { return wrapJoinPoint(this.obj.setUnderlyingType(oldValue, newValue)); }
}

export class TypedefNameDecl extends NamedDecl {
}

export class TypedefType extends Type {
  get decl(): TypedefNameDecl { return wrapJoinPoint(this.obj.getDecl)() }
  get underlyingType(): Type { return wrapJoinPoint(this.obj.getUnderlyingType)() }
}

export class UnaryExprOrType extends Expression {
  get argExpr(): Expression { return wrapJoinPoint(this.obj.getArgExpr)() }
  get argType(): Type { return wrapJoinPoint(this.obj.getArgType)() }
  get hasArgExpr(): boolean { return wrapJoinPoint(this.obj.getHasArgExpr)() }
  get hasTypeExpr(): boolean { return wrapJoinPoint(this.obj.getHasTypeExpr)() }
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
  setArgType(argType: Type): void { return wrapJoinPoint(this.obj.setArgType(argType)); }
}

export class UnaryOp extends Op {
  get isPointerDeref(): boolean { return wrapJoinPoint(this.obj.getIsPointerDeref)() }
  get operand(): Expression { return wrapJoinPoint(this.obj.getOperand)() }
}

export class UndefinedType extends Type {
}

export class Varref extends Expression {
  get declaration(): Declarator { return wrapJoinPoint(this.obj.getDeclaration)() }
  get hasProperty(): boolean { return wrapJoinPoint(this.obj.getHasProperty)() }
  get isFunctionCall(): boolean { return wrapJoinPoint(this.obj.getIsFunctionCall)() }
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get property(): string { return wrapJoinPoint(this.obj.getProperty)() }
  get useExpr(): Expression { return wrapJoinPoint(this.obj.getUseExpr)() }
  setName(name: string): void { return wrapJoinPoint(this.obj.setName(name)); }
}

export class WrapperStmt extends Statement {
  get content(): Joinpoint { return wrapJoinPoint(this.obj.getContent)() }
  get kind(): "comment" | "pragma" { return wrapJoinPoint(this.obj.getKind)() }
}

export class AccessSpecifier extends Decl {
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
}

export class AdjustedType extends Type {
  get originalType(): Type { return wrapJoinPoint(this.obj.getOriginalType)() }
}

export class ArrayAccess extends Expression {
  get arrayVar(): Expression { return wrapJoinPoint(this.obj.getArrayVar)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get numSubscripts(): number { return wrapJoinPoint(this.obj.getNumSubscripts)() }
  get parentAccess(): ArrayAccess { return wrapJoinPoint(this.obj.getParentAccess)() }
  get subscript(): Expression[] { return wrapJoinPoint(this.obj.getSubscript)() }
}

export class ArrayType extends Type {
  get elementType(): Type { return wrapJoinPoint(this.obj.getElementType)() }
  setElementType(arrayElementType: Type): void { return wrapJoinPoint(this.obj.setElementType(arrayElementType)); }
}

export class BinaryOp extends Op {
  get isAssignment(): boolean { return wrapJoinPoint(this.obj.getIsAssignment)() }
  get left(): Expression { return wrapJoinPoint(this.obj.getLeft)() }
  get right(): Expression { return wrapJoinPoint(this.obj.getRight)() }
  setLeft(left: Expression): void { return wrapJoinPoint(this.obj.setLeft(left)); }
  setRight(right: Expression): void { return wrapJoinPoint(this.obj.setRight(right)); }
}

export class BoolLiteral extends Literal {
  get value(): boolean { return wrapJoinPoint(this.obj.getValue)() }
}

export class Break extends Statement {
}

export class BuiltinType extends Type {
  get builtinKind(): string { return wrapJoinPoint(this.obj.getBuiltinKind)() }
  get isFloat(): boolean { return wrapJoinPoint(this.obj.getIsFloat)() }
  get isInteger(): boolean { return wrapJoinPoint(this.obj.getIsInteger)() }
  get isSigned(): boolean { return wrapJoinPoint(this.obj.getIsSigned)() }
  get isUnsigned(): boolean { return wrapJoinPoint(this.obj.getIsUnsigned)() }
  get isVoid(): boolean { return wrapJoinPoint(this.obj.getIsVoid)() }
}

export class Call extends Expression {
  get argList(): Expression[] { return wrapJoinPoint(this.obj.getArgList)() }
  get args(): Expression[] { return wrapJoinPoint(this.obj.getArgs)() }
  get declaration(): Function { return wrapJoinPoint(this.obj.getDeclaration)() }
  get definition(): Function { return wrapJoinPoint(this.obj.getDefinition)() }
  get directCallee(): Function { return wrapJoinPoint(this.obj.getDirectCallee)() }
  get function(): Function { return wrapJoinPoint(this.obj.getFunction)() }
  get functionType(): FunctionType { return wrapJoinPoint(this.obj.getFunctionType)() }
  get isMemberAccess(): boolean { return wrapJoinPoint(this.obj.getIsMemberAccess)() }
  get isStmtCall(): boolean { return wrapJoinPoint(this.obj.getIsStmtCall)() }
  get memberAccess(): MemberAccess { return wrapJoinPoint(this.obj.getMemberAccess)() }
  get memberNames(): string[] { return wrapJoinPoint(this.obj.getMemberNames)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
  get numArgs(): number { return wrapJoinPoint(this.obj.getNumArgs)() }
  get returnType(): Type { return wrapJoinPoint(this.obj.getReturnType)() }
  get signature(): string { return wrapJoinPoint(this.obj.getSignature)() }
  getArg(index: number): Expression { return wrapJoinPoint(this.obj.getArg(index)); }
  addArg(argCode: string, type: Type): void { return wrapJoinPoint(this.obj.addArg(argCode, type)); }
  inline(): boolean { return wrapJoinPoint(this.obj.inline()); }
  setArg(index: number, expr: Expression): void { return wrapJoinPoint(this.obj.setArg(index, expr)); }
  setArgFromString(index: number, expr: string): void { return wrapJoinPoint(this.obj.setArgFromString(index, expr)); }
  setName(name: string): void { return wrapJoinPoint(this.obj.setName(name)); }
  wrap(name: string): void { return wrapJoinPoint(this.obj.wrap(name)); }
}

export class Case extends Statement {
}

export class Cast extends Expression {
  get fromType(): Type { return wrapJoinPoint(this.obj.getFromType)() }
  get isImplicitCast(): boolean { return wrapJoinPoint(this.obj.getIsImplicitCast)() }
  get subExpr(): Expression { return wrapJoinPoint(this.obj.getSubExpr)() }
  get toType(): Type { return wrapJoinPoint(this.obj.getToType)() }
}

export class CilkSpawn extends Call {
}

export class CilkSync extends Statement {
}

export class Class extends Record {
  get allBases(): Class[] { return wrapJoinPoint(this.obj.getAllBases)() }
  get allMethods(): Method[] { return wrapJoinPoint(this.obj.getAllMethods)() }
  get bases(): Class[] { return wrapJoinPoint(this.obj.getBases)() }
  get canonical(): Class { return wrapJoinPoint(this.obj.getCanonical)() }
  get implementation(): Class { return wrapJoinPoint(this.obj.getImplementation)() }
  get isAbstract(): boolean { return wrapJoinPoint(this.obj.getIsAbstract)() }
  get isCanonical(): boolean { return wrapJoinPoint(this.obj.getIsCanonical)() }
  get isInterface(): boolean { return wrapJoinPoint(this.obj.getIsInterface)() }
  get methods(): Method[] { return wrapJoinPoint(this.obj.getMethods)() }
  get prototypes(): Class[] { return wrapJoinPoint(this.obj.getPrototypes)() }
  addMethod(method: Method): void { return wrapJoinPoint(this.obj.addMethod(method)); }
}

export class Continue extends Statement {
}

export class CudaKernelCall extends Call {
  get config(): Expression[] { return wrapJoinPoint(this.obj.getConfig)() }
  setConfig(args: Expression[]): void { return wrapJoinPoint(this.obj.setConfig(args)); }
  setConfigFromStrings(args: string[]): void { return wrapJoinPoint(this.obj.setConfigFromStrings(args)); }
}

export class DeclStmt extends Statement {
  get decls(): Decl[] { return wrapJoinPoint(this.obj.getDecls)() }
}

export class Declarator extends NamedDecl {
}

export class DeleteExpr extends Expression {
}

export class ElaboratedType extends Type {
  get keyword(): string { return wrapJoinPoint(this.obj.getKeyword)() }
  get namedType(): Type { return wrapJoinPoint(this.obj.getNamedType)() }
  get qualifier(): string { return wrapJoinPoint(this.obj.getQualifier)() }
}

export class EmptyStmt extends Statement {
}

export class EnumDecl extends NamedDecl {
  get enumerators(): EnumeratorDecl[] { return wrapJoinPoint(this.obj.getEnumerators)() }
}

export class EnumeratorDecl extends NamedDecl {
}

export class ExprStmt extends Statement {
  get expr(): Expression { return wrapJoinPoint(this.obj.getExpr)() }
}

export class Field extends Declarator {
}

export class FloatLiteral extends Literal {
  get value(): number { return wrapJoinPoint(this.obj.getValue)() }
}

export class Function extends Declarator {
  get body(): Scope { return wrapJoinPoint(this.obj.getBody)() }
  get calls(): Call[] { return wrapJoinPoint(this.obj.getCalls)() }
  get canonical(): Function { return wrapJoinPoint(this.obj.getCanonical)() }
  get declarationJp(): Function { return wrapJoinPoint(this.obj.getDeclarationJp)() }
  get declarationJps(): Function[] { return wrapJoinPoint(this.obj.getDeclarationJps)() }
  get definitionJp(): Function { return wrapJoinPoint(this.obj.getDefinitionJp)() }
  get functionType(): FunctionType { return wrapJoinPoint(this.obj.getFunctionType)() }
  get hasDefinition(): boolean { return wrapJoinPoint(this.obj.getHasDefinition)() }
  get id(): string { return wrapJoinPoint(this.obj.getId)() }
  get isCanonical(): boolean { return wrapJoinPoint(this.obj.getIsCanonical)() }
  get isCudaKernel(): boolean { return wrapJoinPoint(this.obj.getIsCudaKernel)() }
  get isDelete(): boolean { return wrapJoinPoint(this.obj.getIsDelete)() }
  get isImplementation(): boolean { return wrapJoinPoint(this.obj.getIsImplementation)() }
  get isInline(): boolean { return wrapJoinPoint(this.obj.getIsInline)() }
  get isModulePrivate(): boolean { return wrapJoinPoint(this.obj.getIsModulePrivate)() }
  get isPrototype(): boolean { return wrapJoinPoint(this.obj.getIsPrototype)() }
  get isPure(): boolean { return wrapJoinPoint(this.obj.getIsPure)() }
  get isVirtual(): boolean { return wrapJoinPoint(this.obj.getIsVirtual)() }
  get paramNames(): string[] { return wrapJoinPoint(this.obj.getParamNames)() }
  get params(): Param[] { return wrapJoinPoint(this.obj.getParams)() }
  get returnType(): Type { return wrapJoinPoint(this.obj.getReturnType)() }
  get signature(): string { return wrapJoinPoint(this.obj.getSignature)() }
  get storageClass(): StorageClass { return wrapJoinPoint(this.obj.getStorageClass)() }
  getDeclaration(withReturnType: boolean): string { return wrapJoinPoint(this.obj.getDeclaration(withReturnType)); }
  addParam(param: string): void { return wrapJoinPoint(this.obj.addParam(param)); }
  clone(newName: string, insert: boolean): Function { return wrapJoinPoint(this.obj.clone(newName, insert)); }
  cloneOnFile(newName: string): Function { return wrapJoinPoint(this.obj.cloneOnFile(newName)); }
  insertReturn(code: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.insertReturn(code)); }
  newCall(args: Joinpoint[]): Call { return wrapJoinPoint(this.obj.newCall(args)); }
  setBody(body: Scope): void { return wrapJoinPoint(this.obj.setBody(body)); }
  setFunctionType(functionType: FunctionType): void { return wrapJoinPoint(this.obj.setFunctionType(functionType)); }
  setParam(index: number, param: Param): void { return wrapJoinPoint(this.obj.setParam(index, param)); }
  setParamType(index: number, newType: Type): void { return wrapJoinPoint(this.obj.setParamType(index, newType)); }
  setParams(params: Param[]): void { return wrapJoinPoint(this.obj.setParams(params)); }
  setParamsFromStrings(params: string[]): void { return wrapJoinPoint(this.obj.setParamsFromStrings(params)); }
  setReturnType(returnType: Type): void { return wrapJoinPoint(this.obj.setReturnType(returnType)); }
}

export class FunctionType extends Type {
  get paramTypes(): Joinpoint[] { return wrapJoinPoint(this.obj.getParamTypes)() }
  get returnType(): Type { return wrapJoinPoint(this.obj.getReturnType)() }
  setParamType(index: number, newType: Type): void { return wrapJoinPoint(this.obj.setParamType(index, newType)); }
  setReturnType(newType: Type): void { return wrapJoinPoint(this.obj.setReturnType(newType)); }
}

export class GotoStmt extends Statement {
  get label(): LabelDecl { return wrapJoinPoint(this.obj.getLabel)() }
  setLabel(label: LabelDecl): void { return wrapJoinPoint(this.obj.setLabel(label)); }
}

export class If extends Statement {
  get cond(): Expression { return wrapJoinPoint(this.obj.getCond)() }
  get condDecl(): Vardecl { return wrapJoinPoint(this.obj.getCondDecl)() }
  get else(): Scope { return wrapJoinPoint(this.obj.getElse)() }
  get then(): Scope { return wrapJoinPoint(this.obj.getThen)() }
  setCond(cond: Expression): void { return wrapJoinPoint(this.obj.setCond(cond)); }
  setElse(elseStatement: Statement): void { return wrapJoinPoint(this.obj.setElse(elseStatement)); }
  setThen(then: Statement): void { return wrapJoinPoint(this.obj.setThen(then)); }
}

export class IntLiteral extends Literal {
  get value(): number { return wrapJoinPoint(this.obj.getValue)() }
}

export class LabelDecl extends NamedDecl {
}

export class LabelStmt extends Statement {
  get decl(): LabelDecl { return wrapJoinPoint(this.obj.getDecl)() }
  setDecl(label: LabelDecl): void { return wrapJoinPoint(this.obj.setDecl(label)); }
}

export class Loop extends Statement {
  get body(): Scope { return wrapJoinPoint(this.obj.getBody)() }
  get cond(): Statement { return wrapJoinPoint(this.obj.getCond)() }
  get condRelation(): Relation { return wrapJoinPoint(this.obj.getCondRelation)() }
  get controlVar(): string { return wrapJoinPoint(this.obj.getControlVar)() }
  get endValue(): string { return wrapJoinPoint(this.obj.getEndValue)() }
  get hasCondRelation(): boolean { return wrapJoinPoint(this.obj.getHasCondRelation)() }
  get id(): string { return wrapJoinPoint(this.obj.getId)() }
  get init(): Statement { return wrapJoinPoint(this.obj.getInit)() }
  get initValue(): string { return wrapJoinPoint(this.obj.getInitValue)() }
  get isInnermost(): boolean { return wrapJoinPoint(this.obj.getIsInnermost)() }
  get isOutermost(): boolean { return wrapJoinPoint(this.obj.getIsOutermost)() }
  get isParallel(): boolean { return wrapJoinPoint(this.obj.getIsParallel)() }
  get iterations(): number { return wrapJoinPoint(this.obj.getIterations)() }
  get iterationsExpr(): Expression { return wrapJoinPoint(this.obj.getIterationsExpr)() }
  get kind(): "for" | "while" | "dowhile" | "foreach" { return wrapJoinPoint(this.obj.getKind)() }
  get nestedLevel(): number { return wrapJoinPoint(this.obj.getNestedLevel)() }
  get rank(): number[] { return wrapJoinPoint(this.obj.getRank)() }
  get step(): Statement { return wrapJoinPoint(this.obj.getStep)() }
  get stepValue(): string { return wrapJoinPoint(this.obj.getStepValue)() }
  getIsInterchangeable(otherLoop: Loop): boolean { return wrapJoinPoint(this.obj.getIsInterchangeable(otherLoop)); }
  changeKind(kind: string): void { return wrapJoinPoint(this.obj.changeKind(kind)); }
  interchange(otherLoop: Loop): void { return wrapJoinPoint(this.obj.interchange(otherLoop)); }
  setBody(body: Scope): void { return wrapJoinPoint(this.obj.setBody(body)); }
  setCond(condCode: string): void { return wrapJoinPoint(this.obj.setCond(condCode)); }
  setCondRelation(operator: Relation): void { return wrapJoinPoint(this.obj.setCondRelation(operator)); }
  setEndValue(initCode: string): void { return wrapJoinPoint(this.obj.setEndValue(initCode)); }
  setInit(initCode: string): void { return wrapJoinPoint(this.obj.setInit(initCode)); }
  setInitValue(initCode: string): void { return wrapJoinPoint(this.obj.setInitValue(initCode)); }
  setIsParallel(isParallel: boolean): void { return wrapJoinPoint(this.obj.setIsParallel(isParallel)); }
  setKind(kind: string): void { return wrapJoinPoint(this.obj.setKind(kind)); }
  setStep(stepCode: string): void { return wrapJoinPoint(this.obj.setStep(stepCode)); }
  tile(blockSize: string, reference: Statement): Statement { return wrapJoinPoint(this.obj.tile(blockSize, reference)); }
}

export class Marker extends Pragma {
  get contents(): Joinpoint { return wrapJoinPoint(this.obj.getContents)() }
  get id(): string { return wrapJoinPoint(this.obj.getId)() }
}

export class MemberCall extends Call {
  get base(): Expression { return wrapJoinPoint(this.obj.getBase)() }
  get rootBase(): Expression { return wrapJoinPoint(this.obj.getRootBase)() }
}

export class Method extends Function {
  get record(): Class { return wrapJoinPoint(this.obj.getRecord)() }
  removeRecord(): void { return wrapJoinPoint(this.obj.removeRecord()); }
}

export class Omp extends Pragma {
  get clauseKinds(): string[] { return wrapJoinPoint(this.obj.getClauseKinds)() }
  get collapse(): string { return wrapJoinPoint(this.obj.getCollapse)() }
  get copyin(): string[] { return wrapJoinPoint(this.obj.getCopyin)() }
  get default(): string { return wrapJoinPoint(this.obj.getDefault)() }
  get firstprivate(): string[] { return wrapJoinPoint(this.obj.getFirstprivate)() }
  get kind(): string { return wrapJoinPoint(this.obj.getKind)() }
  get lastprivate(): string[] { return wrapJoinPoint(this.obj.getLastprivate)() }
  get numThreads(): string { return wrapJoinPoint(this.obj.getNumThreads)() }
  get ordered(): string { return wrapJoinPoint(this.obj.getOrdered)() }
  get private(): string[] { return wrapJoinPoint(this.obj.getPrivate)() }
  get procBind(): string { return wrapJoinPoint(this.obj.getProcBind)() }
  get reductionKinds(): string[] { return wrapJoinPoint(this.obj.getReductionKinds)() }
  get scheduleChunkSize(): string { return wrapJoinPoint(this.obj.getScheduleChunkSize)() }
  get scheduleKind(): string { return wrapJoinPoint(this.obj.getScheduleKind)() }
  get scheduleModifiers(): string[] { return wrapJoinPoint(this.obj.getScheduleModifiers)() }
  get shared(): string[] { return wrapJoinPoint(this.obj.getShared)() }
  getHasClause(clauseName: string): boolean { return wrapJoinPoint(this.obj.getHasClause(clauseName)); }
  getIsClauseLegal(clauseName: string): boolean { return wrapJoinPoint(this.obj.getIsClauseLegal(clauseName)); }
  getReduction(kind: string): string[] { return wrapJoinPoint(this.obj.getReduction(kind)); }
  removeClause(clauseKind: string): void { return wrapJoinPoint(this.obj.removeClause(clauseKind)); }
  setCollapse(newExpr: string): void { return wrapJoinPoint(this.obj.setCollapse(newExpr)); }
  setCopyin(newVariables: string[]): void { return wrapJoinPoint(this.obj.setCopyin(newVariables)); }
  setDefault(newDefault: string): void { return wrapJoinPoint(this.obj.setDefault(newDefault)); }
  setFirstprivate(newVariables: string[]): void { return wrapJoinPoint(this.obj.setFirstprivate(newVariables)); }
  setKind(directiveKind: string): void { return wrapJoinPoint(this.obj.setKind(directiveKind)); }
  setLastprivate(newVariables: string[]): void { return wrapJoinPoint(this.obj.setLastprivate(newVariables)); }
  setNumThreads(newExpr: string): void { return wrapJoinPoint(this.obj.setNumThreads(newExpr)); }
  setOrdered(): void { return wrapJoinPoint(this.obj.setOrdered()); }
  setPrivate(newVariables: string[]): void { return wrapJoinPoint(this.obj.setPrivate(newVariables)); }
  setProcBind(newBind: string): void { return wrapJoinPoint(this.obj.setProcBind(newBind)); }
  setReduction(kind: string, newVariables: string[]): void { return wrapJoinPoint(this.obj.setReduction(kind, newVariables)); }
  setScheduleChunkSize(chunkSize: string): void { return wrapJoinPoint(this.obj.setScheduleChunkSize(chunkSize)); }
  setScheduleKind(scheduleKind: string): void { return wrapJoinPoint(this.obj.setScheduleKind(scheduleKind)); }
  setScheduleModifiers(modifiers: string[]): void { return wrapJoinPoint(this.obj.setScheduleModifiers(modifiers)); }
  setShared(newVariables: string[]): void { return wrapJoinPoint(this.obj.setShared(newVariables)); }
}

export class ParenType extends Type {
  get innerType(): Type { return wrapJoinPoint(this.obj.getInnerType)() }
  setInnerType(innerType: Type): void { return wrapJoinPoint(this.obj.setInnerType(innerType)); }
}

export class PointerType extends Type {
  get pointee(): Type { return wrapJoinPoint(this.obj.getPointee)() }
  get pointerLevels(): number { return wrapJoinPoint(this.obj.getPointerLevels)() }
  setPointee(pointeeType: Type): void { return wrapJoinPoint(this.obj.setPointee(pointeeType)); }
}

export class QualType extends Type {
  get qualifiers(): string[] { return wrapJoinPoint(this.obj.getQualifiers)() }
  get unqualifiedType(): Type { return wrapJoinPoint(this.obj.getUnqualifiedType)() }
}

export class ReturnStmt extends Statement {
  get returnExpr(): Expression { return wrapJoinPoint(this.obj.getReturnExpr)() }
}

export class Scope extends Statement {
  get allStmts(): Statement[] { return wrapJoinPoint(this.obj.getAllStmts)() }
  get firstStmt(): Statement { return wrapJoinPoint(this.obj.getFirstStmt)() }
  get lastStmt(): Statement { return wrapJoinPoint(this.obj.getLastStmt)() }
  get naked(): boolean { return wrapJoinPoint(this.obj.getNaked)() }
  get numStatements(): number { return wrapJoinPoint(this.obj.getNumStatements)() }
  get owner(): Joinpoint { return wrapJoinPoint(this.obj.getOwner)() }
  get stmts(): Statement[] { return wrapJoinPoint(this.obj.getStmts)() }
  getNumStatements(flat: boolean): number { return wrapJoinPoint(this.obj.getNumStatements(flat)); }
  addLocal(name: string, type: Joinpoint, initValue: string): Joinpoint { return wrapJoinPoint(this.obj.addLocal(name, type, initValue)); }
  cfg(): string { return wrapJoinPoint(this.obj.cfg()); }
  clear(): void { return wrapJoinPoint(this.obj.clear()); }
  dfg(): string { return wrapJoinPoint(this.obj.dfg()); }
  insertBegin(node: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.insertBegin(node)); }
  insertEnd(node: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.insertEnd(node)); }
  insertReturn(code: Joinpoint): Joinpoint { return wrapJoinPoint(this.obj.insertReturn(code)); }
  setNaked(isNaked: boolean): void { return wrapJoinPoint(this.obj.setNaked(isNaked)); }
}

export class TagType extends Type {
  get decl(): Decl { return wrapJoinPoint(this.obj.getDecl)() }
  get name(): string { return wrapJoinPoint(this.obj.getName)() }
}

export class TemplateSpecializationType extends Type {
  get args(): string[] { return wrapJoinPoint(this.obj.getArgs)() }
  get firstArgType(): Type { return wrapJoinPoint(this.obj.getFirstArgType)() }
  get numArgs(): number { return wrapJoinPoint(this.obj.getNumArgs)() }
  get templateName(): string { return wrapJoinPoint(this.obj.getTemplateName)() }
}

export class TypedefDecl extends TypedefNameDecl {
}

export class Vardecl extends Declarator {
  get definition(): Vardecl { return wrapJoinPoint(this.obj.getDefinition)() }
  get hasInit(): boolean { return wrapJoinPoint(this.obj.getHasInit)() }
  get init(): Expression { return wrapJoinPoint(this.obj.getInit)() }
  get initStyle(): string { return wrapJoinPoint(this.obj.getInitStyle)() }
  get isGlobal(): boolean { return wrapJoinPoint(this.obj.getIsGlobal)() }
  get isParam(): boolean { return wrapJoinPoint(this.obj.getIsParam)() }
  get storageClass(): string { return wrapJoinPoint(this.obj.getStorageClass)() }
  removeInit(): void { return wrapJoinPoint(this.obj.removeInit()); }
  setInit(init: Expression): void { return wrapJoinPoint(this.obj.setInit(init)); }
  setStorageClass(storageClass: string): void { return wrapJoinPoint(this.obj.setStorageClass(storageClass)); }
  varref(): Varref { return wrapJoinPoint(this.obj.varref()); }
}

export class VariableArrayType extends ArrayType {
  get sizeExpr(): Expression { return wrapJoinPoint(this.obj.getSizeExpr)() }
  setSizeExpr(sizeExpr: Expression): void { return wrapJoinPoint(this.obj.setSizeExpr(sizeExpr)); }
}

export class Body extends Scope {
}

export class CilkFor extends Loop {
}

export class EnumType extends TagType {
  get integerType(): Type { return wrapJoinPoint(this.obj.getIntegerType)() }
}

export class Param extends Vardecl {
}

enum StorageClass {
  AUTO,
  EXTERN,
  NONE,
  PRIVATE_EXTERN,
  REGISTER,
  STATIC,
}

enum Relation {
  EQ,
  GE,
  GT,
  LE,
  LT,
  NE,
}

const JoinpointMapper: { [key: string]: typeof Joinpoint } = {
  joinpoint: Joinpoint,
  attribute: Attribute,
  clavaException: ClavaException,
  comment: Comment,
  decl: Decl,
  empty: Empty,
  expression: Expression,
  file: File,
  include: Include,
  literal: Literal,
  memberAccess: MemberAccess,
  namedDecl: NamedDecl,
  newExpr: NewExpr,
  op: Op,
  parenExpr: ParenExpr,
  pragma: Pragma,
  program: Program,
  record: Record,
  statement: Statement,
  struct: Struct,
  switch: Switch,
  tag: Tag,
  ternaryOp: TernaryOp,
  this: This,
  type: Type,
  typedefNameDecl: TypedefNameDecl,
  typedefType: TypedefType,
  unaryExprOrType: UnaryExprOrType,
  unaryOp: UnaryOp,
  undefinedType: UndefinedType,
  varref: Varref,
  wrapperStmt: WrapperStmt,
  accessSpecifier: AccessSpecifier,
  adjustedType: AdjustedType,
  arrayAccess: ArrayAccess,
  arrayType: ArrayType,
  binaryOp: BinaryOp,
  boolLiteral: BoolLiteral,
  break: Break,
  builtinType: BuiltinType,
  call: Call,
  case: Case,
  cast: Cast,
  cilkSpawn: CilkSpawn,
  cilkSync: CilkSync,
  class: Class,
  continue: Continue,
  cudaKernelCall: CudaKernelCall,
  declStmt: DeclStmt,
  declarator: Declarator,
  deleteExpr: DeleteExpr,
  elaboratedType: ElaboratedType,
  emptyStmt: EmptyStmt,
  enumDecl: EnumDecl,
  enumeratorDecl: EnumeratorDecl,
  exprStmt: ExprStmt,
  field: Field,
  floatLiteral: FloatLiteral,
  function: Function,
  functionType: FunctionType,
  gotoStmt: GotoStmt,
  if: If,
  intLiteral: IntLiteral,
  labelDecl: LabelDecl,
  labelStmt: LabelStmt,
  loop: Loop,
  marker: Marker,
  memberCall: MemberCall,
  method: Method,
  omp: Omp,
  parenType: ParenType,
  pointerType: PointerType,
  qualType: QualType,
  returnStmt: ReturnStmt,
  scope: Scope,
  tagType: TagType,
  templateSpecializationType: TemplateSpecializationType,
  typedefDecl: TypedefDecl,
  vardecl: Vardecl,
  variableArrayType: VariableArrayType,
  body: Body,
  cilkFor: CilkFor,
  enumType: EnumType,
  param: Param,
};

export function wrapJoinPoint(obj: any): any {
  if (obj === undefined) {
    return obj;
  }

  if (obj instanceof Joinpoint) {
    return obj;
  }

  if (typeof obj !== "object") {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(wrapJoinPoint);
  }

  if (!JavaTypes.isJavaObject(obj)) {
    console.log("Given Java join point is not a Java class: " + typeof obj);
    return obj;
  }

  const isJavaJoinPoint = JavaTypes.JoinPoint.isJoinPoint(obj);
  if (!isJavaJoinPoint) {
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
      `Given Java join point is a Java class but is not a JoinPoint: ${obj.getClass()}`
    );
  }

  return new JoinpointMapper[obj.getType() as string](obj);
}
